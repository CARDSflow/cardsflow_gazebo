/*
 *  Copyright (c) 2012-2013, MYOROBOTICS consortium
 *  Author: Michael Jaentsch
 *  All rights reserved
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification is governed by the MYOROBOTICS Non-Commercial Software
 *  License Agreement. See LICENSE file distributed with this work for
 *  additional information.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under this license is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or
 *  implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 */

#include "caliper/de.caliper.sim/ext/actuators/eccerobotMuscle/physics/ILinearSpringDamper.h"
#include "EccerobotMuscleExtension.h"
#include "caliper/de.caliper.daq/DaqSource.h"
#include "physics/Muscle.h"
#include "graphics/Muscle.h"
#include "ParseException.h"
#include <QDomDocument>
#include <QFile>
#include <QMessageBox>
#include <QFileInfo>

namespace de
{
namespace caliper
{
namespace sim
{
namespace ext
{
namespace actuators
{
namespace er
{
EccerobotMuscleExtension::EccerobotMuscleExtension()
{

}

EccerobotMuscleExtension::~EccerobotMuscleExtension()
{

}

const QString EccerobotMuscleExtension::getType() const
{
	return "EccerobotMuscle";
}

const QString EccerobotMuscleExtension::getAuthor() const
{
	return "Jaentsch";
}

const QString EccerobotMuscleExtension::getInstitution() const
{
	return "TUM";
}

unsigned int EccerobotMuscleExtension::getVersion() const
{
	return 1;
}

const QString EccerobotMuscleExtension::getDescription() const
{
	return "Eccerobot muscle extension.";
}

void EccerobotMuscleExtension::load(ISimulator* simulator, const QString& file,
		daq::IDaq* daq, bool loadGraphics)
{
	if (simulator)
	{
		if (simulator->getModel() && simulator->getViewer())
		{
			if (simulator->getModel()->getScene())
			{
				QDomDocument doc;

				QString errorMsg;

				int errorLine, errorColumn;

				QFile fileHandle(file);

				if (fileHandle.open(QIODevice::ReadOnly))
				{
					if (!doc.setContent(&fileHandle, false, &errorMsg,
							&errorLine, &errorColumn))
					{
						fileHandle.close();

						return;
					}
				}
				else
				{
					return;
				}

				fileHandle.close();

				QString rootPath = "";

				if (file.startsWith(QChar('/')))
				{
					QFileInfo nfo(file);

					rootPath = nfo.path();
				}

				QDomElement root = doc.documentElement();

				for (QDomElement muscleElement = root.firstChildElement(
						"muscle"); !muscleElement.isNull(); muscleElement =
						muscleElement.nextSiblingElement("muscle"))
				{
					physics::Muscle * physicsMuscle =
							new physics::Muscle(
									dynamic_cast< sgal::physics::Model* >(simulator->getModel()->getScene()->getModel(
											0)));

					graphics::Muscle * graphicsMuscle = 0;

					if (loadGraphics)
					{
						graphicsMuscle =
								new graphics::Muscle(
										dynamic_cast< sgal::graphics::Model* >(simulator->getViewer()->getScene()->getModel(
												0)), physicsMuscle);
					}

					try
					{
						physicsMuscle->setRootPath(rootPath);

						physicsMuscle->init(muscleElement);

						if (loadGraphics)
						{
							graphicsMuscle->init(muscleElement);
						}
					} catch (ParseException &ex)
					{
						QMessageBox::critical(simulator, "Error loading file",
								QString(ex.what()), QMessageBox::Ok);

						std::cout << "Cannot init muscle: " << ex.what()
								<< std::endl;

						delete physicsMuscle;

						delete graphicsMuscle;

						continue;
					}

					if (daq)
					{
						daq::DaqSource< double >* daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"Length", "m",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::Muscle::getLength,
												physicsMuscle));

						daq->registerDaqSource(daqSource);

						daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"Force-SEE", "N",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::ISeriesElasticElement::getForce,
												physicsMuscle->getSeriesElasticElement()));

						daq->registerDaqSource(daqSource);

						daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"Force-Sensor", "N",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::IMuscle::getForce,
												physicsMuscle));

						daq->registerDaqSource(daqSource);

						daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"Force-Applied", "N",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::IMuscle::getAppliedForce,
												physicsMuscle));

						daq->registerDaqSource(daqSource);

						daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"KiteLength", "m",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::IMuscle::getKiteLength,
												physicsMuscle));

						daq->registerDaqSource(daqSource);

						daqSource =
								new daq::DaqSource< double >(
										simulator->getName(), "EcceMuscle",
										QString(
												physicsMuscle->getName().c_str()),
										"SEE-Length", "m",
										boost::bind(
												&de::caliper::sim::ext::actuators::er::physics::ISeriesElasticElement::getLength,
												physicsMuscle->getSeriesElasticElement()));

						daq->registerDaqSource(daqSource);
					}
				}
			}
		}
	}
}
}
}
}
}
}
}

Q_EXPORT_PLUGIN2(de.caliper.sim.ext.actuators.er.EccerobotMuscleExtension,
		de::caliper::sim::ext::actuators::er::EccerobotMuscleExtension)
